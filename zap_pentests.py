import time
from pprint import pprint
from zapv2 import ZAPv2
import json

APIKEY = 'None' # Change to match the API key set in ZAP

# set zed attack proxy
zap = ZAPv2(apikey=APIKEY)

TARGET_URL = "http://www.kit.edu"


def start_spider(target):
    print('Spidering target {}'.format(target))
    scanid = zap.spider.scan(target)
    # Give the Spider a chance to start
    time.sleep(2)
    while (int(zap.spider.status(scanid)) < 100):
        # Loop until the spider has finished
        print('Spider progress %: {}'.format(zap.spider.status(scanid)))
        time.sleep(2)

    print('Spider completed')

def wait_for_passive_scan_to_complete():
    while (int(zap.pscan.records_to_scan) > 0):
        print('Records to passive scan : {}'.format(zap.pscan.records_to_scan))
        time.sleep(2)

    print('Passive Scan completed')

def start_ascan(target):
    print('Active Scanning target {}'.format(target))
    scanid = zap.ascan.scan(target)
    while (int(zap.ascan.status(scanid)) < 100):
        # Loop until the scanner has finished
        print('Scan progress %: {}'.format(zap.ascan.status(scanid)))
        time.sleep(5)

    print('Active Scan completed')


def get_scan_alerts():
    # Report the results
    print('Hosts: {}'.format(', '.join(zap.core.hosts)))
    print('Alerts: ')
    pprint(zap.core.alerts())


def get_request_messages(url=None):
    # return the request messages from a certain request
    return zap.core.messages(baseurl=url)

def get_request_message(id):
    # return the request messages from a certain request
    message = zap.core.message(id)
    req_message = message['requestHeader'] + '\n' + message['requestBody']
    return req_message

def get_response_message(id):
    # return the response messages from a certain request
    message = zap.core.message(id)
    resp_message = message['responseHeader'] + '\n' + message['responseBody']
    return resp_message



start_spider(TARGET_URL)
wait_for_passive_scan_to_complete()
start_ascan(TARGET_URL)

messages = get_request_messages(TARGET_URL)
alerts = get_scan_alerts()